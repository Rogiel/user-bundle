<?php

/**
 * Rogiel Bundles
 * RogielUserBundle
 *
 * @link http://www.rogiel.com/
 * @copyright Copyright (c) 2016 Rogiel Sulzbach (http://www.rogiel.com)
 * @license Proprietary
 *
 * This bundle and its related source files can only be used under
 * explicit licensing from it's authors.
 */
namespace Rogiel\Bundle\UserBundle\Entity\Repository;

use Rogiel\Bundle\UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository {

	const DEFAULT_RESULT_CACHE_LIFETIME = 60;

	/**
	 * @param $email string the user email
	 * @return User|null
	 */
	public function getUserByEmail($email) {
		$queryBuilder = $this->createQuery();

		$queryBuilder->leftJoin('u.group', 'group0')
			->addSelect('group0');

		$queryBuilder->where($queryBuilder->expr()->eq('u.email', ':email'));
		$queryBuilder->setParameters(['email' => $email]);

		return $queryBuilder->getQuery()
			->useQueryCache(true)->useResultCache(true, self::DEFAULT_RESULT_CACHE_LIFETIME)
			->getOneOrNullResult();
	}

	/**
	 * @return \Doctrine\ORM\QueryBuilder
	 */
	public function createQuery() {
		$query = self::createQueryBuilder('u');
		$query->setCacheable(true);
		$query->setCacheRegion('rogiel_user_repository');

		return $query;
	}

	/**
	 * @return \Doctrine\ORM\EntityManager
	 */
	public function getEntityManager() {
		return parent::getEntityManager();
	}

	/**
	 * @param User $user the user to be persisted
	 */
	public function persist(User $user) {
		$this->getEntityManager()->persist($user);
	}

	/**
	 * @param User $user the user to be flushed
	 */
	public function flush(User $user) {
		$this->getEntityManager()->flush($user);
	}

	/**
	 * @param User $user the user to be checked
	 * @return bool true if the repository contains the given entity
	 */
	public function contains(User $user) {
		return $this->getEntityManager()->contains($user);
	}

	/**
	 * @param User $user the user to be removed
	 */
	public function remove(User $user) {
		$this->getEntityManager()->remove($user);
	}

	/**
	 * @param User $user the user to be refreshed
	 */
	public function refresh(User $user) {
		$this->getEntityManager()->refresh($user);
	}

	/**
	 * @param User $user the user to be merged
	 */
	public function merge(User $user) {
		$this->getEntityManager()->merge($user);
	}

}
